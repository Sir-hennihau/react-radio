{"version":3,"sources":["Utils.ts","Footer.tsx","Navbar.tsx","RadioItem.tsx","RadioList.tsx","App.tsx","index.tsx"],"names":["Color","CSS_COLOR_FILTER","Footer","currentRadio","useContext","RadioContext","FooterContainer","FooterInfoText","FooterRadioText","name","styled","footer","BLACK","p","YELLOW","WHITE","Navbar","StyledNavbarContainer","StyledIcon","alt","src","StyledNavbarHeadline","nav","h1","img","RadioItem","radio","radios","setCurrentRadio","frequency","image","isExpanded","changeRadio","changeAmount","changedRadioIndex","findIndex","newRadioIndex","length","RadioItemContainer","RadioItemExpandedContainer","RadioItemControlIcon","onClick","RadioItemRadioLogo","RadioItemPreviewContainer","RadioItemName","RadioItemFrequency","div","GRAY_DARK","RadioList","style","width","height","RadioListContainer","map","index","createContext","AppContainer","BLUE","App","useState","setRadios","useEffect","axios","get","then","response","data","catch","error","console","log","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sHAAYA,E,yFAAAA,K,eAAAA,E,gBAAAA,E,oBAAAA,E,qBAAAA,E,gBAAAA,E,kBAAAA,M,KASL,IAAMC,EACX,uG,+aCLK,IAAMC,EAAS,WAAO,IACnBC,EAAiBC,qBAAWC,GAA5BF,aAER,OAAKA,EAGH,eAACG,EAAD,WACE,cAACC,EAAD,gCACA,cAACC,EAAD,UAAkBL,EAAaM,UALT,MAUtBH,EAAkBI,IAAOC,OAAV,IAMLX,EAAMY,OAIhBL,EAAiBG,IAAOG,EAAV,IACTb,EAAMc,QAIXN,EAAkBE,IAAOG,EAAV,IACVb,EAAMe,O,ifC3BV,IAAMC,EAAS,SAAC,GACrB,OAD0C,eAExC,eAACC,EAAD,WACE,cAACC,EAAD,CACEC,IAAI,OACJC,IAAI,gDAGN,cAACC,EAAD,uBAEA,cAACH,EAAD,CACEC,IAAI,YACJC,IAAI,gEAMNH,EAAwBP,IAAOY,IAAV,IAGXtB,EAAMc,QAQhBO,EAAuBX,IAAOa,GAAV,IACfvB,EAAMe,OAIXG,EAAaR,IAAOc,IAAV,IAIJvB,G,m5BCnCL,IAAMwB,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAA4B,EACJtB,qBAAWC,GAArDsB,EAD8C,EAC9CA,OAAQxB,EADsC,EACtCA,aAAcyB,EADwB,EACxBA,gBAEtBC,EAA2BH,EAA3BG,UAAWpB,EAAgBiB,EAAhBjB,KAAMqB,EAAUJ,EAAVI,MAEnBC,GAAyB,OAAZ5B,QAAY,IAAZA,OAAA,EAAAA,EAAcM,QAASiB,EAAMjB,KAQ1CuB,EAAc,SAACC,GACnB,IAAK9B,IAAiBwB,EAAQ,OAAO,KAErC,IAIMO,EAJaP,EAAOQ,WACxB,SAACT,GAAD,OAAWA,EAAMjB,OAASN,EAAaM,QAGFwB,EAEjCG,GACmB,IAAvBF,EACIP,EAAOU,OAAS,EAChBH,IAAsBP,EAAOU,OAC7B,EACAH,EAENN,EAAgB,eAAKD,EAAOS,MAG9B,OACE,eAACE,EAAD,WACGP,GACC,eAACQ,EAAD,WACE,cAACC,EAAD,CACErB,IAAI,QACJsB,QAAS,kBAAMT,GAAa,IAC5BZ,IAAI,0DAEN,cAACsB,EAAD,CAAoBtB,IAAKU,IACzB,cAACU,EAAD,CACErB,IAAI,OACJsB,QAAS,kBAAMT,EAAY,IAC3BZ,IAAI,4DAKV,eAACuB,EAAD,WACE,cAACC,EAAD,CAAeH,QA5CL,WACd,GAAIV,EAAY,OAAOH,EAAgB,MAEvCA,EAAgBF,IAyCZ,SAAkCjB,IAElC,cAACoC,EAAD,UAAqBhB,WAKvBS,EAAqB5B,IAAOoC,IAAV,IACK9C,EAAM+C,WAI7BJ,EAA4BjC,IAAOoC,IAAV,KAMzBF,EAAgBlC,IAAOG,EAAV,IACRb,EAAMe,OAGX8B,EAAqBnC,IAAOG,EAAV,IACbb,EAAMe,OAIXwB,EAA6B7B,IAAOoC,IAAV,KAM1BN,EAAuB9B,IAAOc,IAAV,IAGdvB,GAGNyC,EAAqBhC,IAAOc,IAAV,K,kLC5FjB,IAAMwB,EAAY,SAAC,GAAwB,mBACxCrB,EAAWvB,qBAAWC,GAAtBsB,OAER,OACE,cAAC,IAAD,CAAYsB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAAzC,SACE,cAACC,EAAD,UACGzB,EAAO0B,KAAI,SAAC3B,EAAO4B,GAAR,OACV,cAAC,EAAD,CAAuB5B,MAAOA,GAAd4B,WAOpBF,EAAqB1C,IAAOoC,IAAV,K,6KCZjB,IAAMzC,EAAekD,wBAIzB,CACD5B,OAAQ,GACRC,gBAAiB,eAgCb4B,EAAe9C,IAAOoC,IAAV,IACF9C,EAAMyD,MAOPC,GArCH,WAAO,IAAD,EACYC,qBADZ,mBACThC,EADS,KACDiC,EADC,OAEwBD,qBAFxB,mBAETxD,EAFS,KAEKyB,EAFL,KAgBhB,OAZAiC,qBAAU,WACRC,IACGC,IAAyB,wCACzBC,MAAK,SAACC,GACLL,EAAUK,EAASC,KAAKvC,WAEzBwC,OAAM,SAACC,GAENC,QAAQC,IAAI,QAASF,QAExB,IAEEzC,EAGH,cAACtB,EAAakE,SAAd,CAAuBC,MAAO,CAAErE,eAAcwB,SAAQC,mBAAtD,SACE,eAAC4B,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,SAPc,4CC/BtBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eb306187.chunk.js","sourcesContent":["export enum Color {\n  BLUE = \"#2b2b34\",\n  BLACK = \"#202027\",\n  GRAY_DARK = \"#3b3b44\",\n  GRAY_LIGHT = \"#4b505d\",\n  WHITE = \"#fdfcfc\",\n  YELLOW = \"#f2a968\",\n}\n\nexport const CSS_COLOR_FILTER =\n  \"brightness(0) invert(100%) sepia(100%) saturate(1%) hue-rotate(52deg) brightness(104%) contrast(98%)\";\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { RadioContext } from \"./App\";\nimport { Color } from \"./Utils\";\n\nexport const Footer = () => {\n  const { currentRadio } = useContext(RadioContext);\n\n  if (!currentRadio) return null;\n\n  return (\n    <FooterContainer>\n      <FooterInfoText>CURRENTLY PLAYING</FooterInfoText>\n      <FooterRadioText>{currentRadio.name}</FooterRadioText>\n    </FooterContainer>\n  );\n};\n\nconst FooterContainer = styled.footer`\n  position: absolute;\n  bottom: 0;\n  text-align: center;\n  width: 100%;\n  height: 60px;\n  background: ${Color.BLACK};\n  border-radius: 0 0 20px 20px;\n`;\n\nconst FooterInfoText = styled.p`\n  color: ${Color.YELLOW};\n  font-size: 12px;\n`;\n\nconst FooterRadioText = styled.p`\n  color: ${Color.WHITE};\n  margin-top: -10px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Color } from \"./Utils\";\nimport { CSS_COLOR_FILTER } from \"./Utils\";\n\ninterface NavbarProps {}\n\nexport const Navbar = ({}: NavbarProps) => {\n  return (\n    <StyledNavbarContainer>\n      <StyledIcon\n        alt=\"back\"\n        src=\"https://img.icons8.com/android/344/back.png\"\n      />\n\n      <StyledNavbarHeadline>STATIONS</StyledNavbarHeadline>\n\n      <StyledIcon\n        alt=\"power off\"\n        src=\"https://img.icons8.com/ios/344/power-off-button--v1.png\"\n      />\n    </StyledNavbarContainer>\n  );\n};\n\nconst StyledNavbarContainer = styled.nav`\n  width: 100%;\n  height: 80px;\n  background: ${Color.YELLOW};\n  position: sticky;\n  border-radius: 20px 20px 0 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledNavbarHeadline = styled.h1`\n  color: ${Color.WHITE};\n  margin: auto;\n`;\n\nconst StyledIcon = styled.img`\n  width: 30px;\n  height: 30px;\n  margin: 0 10px;\n  filter: ${CSS_COLOR_FILTER};\n`;\n","import React, { useContext, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { Color } from \"./Utils\";\nimport { Radio, RadioContext } from \"./App\";\nimport { CSS_COLOR_FILTER } from \"./Utils\";\n\ninterface RadioItemProps {\n  radio: Radio;\n}\n\nexport const RadioItem = ({ radio }: RadioItemProps) => {\n  const { radios, currentRadio, setCurrentRadio } = useContext(RadioContext);\n\n  const { frequency, name, image } = radio;\n\n  const isExpanded = currentRadio?.name === radio.name;\n\n  const onClick = () => {\n    if (isExpanded) return setCurrentRadio(null);\n\n    setCurrentRadio(radio);\n  };\n\n  const changeRadio = (changeAmount: number) => {\n    if (!currentRadio || !radios) return null;\n\n    const radioIndex = radios.findIndex(\n      (radio) => radio.name === currentRadio.name\n    );\n\n    const changedRadioIndex = radioIndex + changeAmount;\n\n    const newRadioIndex =\n      changedRadioIndex === -1\n        ? radios.length - 1\n        : changedRadioIndex === radios.length\n        ? 0\n        : changedRadioIndex;\n\n    setCurrentRadio({ ...radios[newRadioIndex] });\n  };\n\n  return (\n    <RadioItemContainer>\n      {isExpanded && (\n        <RadioItemExpandedContainer>\n          <RadioItemControlIcon\n            alt=\"minus\"\n            onClick={() => changeRadio(-1)}\n            src=\"https://img.icons8.com/pastel-glyph/344/minus--v1.png\"\n          />\n          <RadioItemRadioLogo src={image} />\n          <RadioItemControlIcon\n            alt=\"plus\"\n            onClick={() => changeRadio(1)}\n            src=\"https://img.icons8.com/pastel-glyph/344/plus--v1.png\"\n          />\n        </RadioItemExpandedContainer>\n      )}\n\n      <RadioItemPreviewContainer>\n        <RadioItemName onClick={onClick}>{name}</RadioItemName>\n\n        <RadioItemFrequency>{frequency}</RadioItemFrequency>\n      </RadioItemPreviewContainer>\n    </RadioItemContainer>\n  );\n};\nconst RadioItemContainer = styled.div`\n  border-bottom: 1px solid ${Color.GRAY_DARK};\n  width: calc(100% - 30px);\n`;\n\nconst RadioItemPreviewContainer = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst RadioItemName = styled.p`\n  color: ${Color.WHITE};\n`;\n\nconst RadioItemFrequency = styled.p`\n  color: ${Color.WHITE};\n  font-weight: bold;\n`;\n\nconst RadioItemExpandedContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst RadioItemControlIcon = styled.img`\n  width: 35px;\n  height: 35px;\n  filter: ${CSS_COLOR_FILTER};\n`;\n\nconst RadioItemRadioLogo = styled.img`\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  cursor: pointer;\n  margin: 20px 0;\n`;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { RadioItem } from \"./RadioItem\";\nimport { RadioContext } from \"./App\";\nimport Scrollbars from \"react-custom-scrollbars\";\n\ninterface RadioListProps {}\n\nexport const RadioList = ({}: RadioListProps) => {\n  const { radios } = useContext(RadioContext);\n\n  return (\n    <Scrollbars style={{ width: 250, height: 310 }}>\n      <RadioListContainer>\n        {radios.map((radio, index) => (\n          <RadioItem key={index} radio={radio} />\n        ))}\n      </RadioListContainer>\n    </Scrollbars>\n  );\n};\n\nconst RadioListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 10px;\n`;\n","import axios from \"axios\";\nimport React, { createContext, ReactNode, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Footer } from \"./Footer\";\nimport { Navbar } from \"./Navbar\";\nimport { RadioList } from \"./RadioList\";\nimport { Color } from \"./Utils\";\n\nexport type Radio = { frequency: number; image: string; name: string };\n\nexport const RadioContext = createContext<{\n  currentRadio?: Radio | null;\n  radios: Radio[];\n  setCurrentRadio: (radio: Radio | null) => void;\n}>({\n  radios: [],\n  setCurrentRadio: () => undefined,\n});\n\nconst App = () => {\n  const [radios, setRadios] = useState<Radio[]>();\n  const [currentRadio, setCurrentRadio] = useState<Radio | null>();\n\n  useEffect(() => {\n    axios\n      .get<{ radios: Radio[] }>(\"https://teclead.de/recruiting/radios\")\n      .then((response) => {\n        setRadios(response.data.radios);\n      })\n      .catch((error) => {\n        // TODO: Add proper error handling here in a production environment, for example sending a toast with instructions how to contact support\n        console.log(\"error\", error);\n      });\n  }, []);\n\n  if (!radios) return <p>Loading...</p>;\n\n  return (\n    <RadioContext.Provider value={{ currentRadio, radios, setCurrentRadio }}>\n      <AppContainer>\n        <Navbar />\n        <RadioList />\n        <Footer />\n      </AppContainer>\n    </RadioContext.Provider>\n  );\n};\n\nconst AppContainer = styled.div`\n  background: ${Color.BLUE};\n  border-radius: 20px;\n  height: 450px;\n  position: relative;\n  width: 250px;\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}